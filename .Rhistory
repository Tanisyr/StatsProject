library(datasets)
data(airquality)
library("ggplot")
library("ggplot2")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
library(ggplot2movies)
install.packages("ggplot2movies")
library(ggplot2)
library(ggplot2movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
?t.test
x <- c(140, 138, 150, 148, 135)
y <- c(132, 135, 151, 146, 130)
t.test(x, y)
t.test(x, y, paired = T)
mean(c(x, y))
mean(x
)
mean(y)
1100 + c(-1, 1)*qt(0.975, 8)*10
x = c(1, 1, 1, 0)
t.test(x)
x = c(1, 1, 1, -1)
t.test(x)
x = c(1, 1, 1, 0)
t.test(x, mu=0.5)
?t.test
t.test(x, mu=0.5, alternative = "g")
t.test(x, mu=0.5, alternative = "l")
x = c(1, 1, 1, -1)
t.test(x, alternative = "l")
t.test(x, alternative = "r")
t.test(x, alternative = "g")
/
5/16
x = c(1, 1, 1, 0)
mu0 = 1/100
mu_n = 10/1787
dmu = mu0 - mu_n
dmu
qbinom(mu_n)
?qbinom
qbinom(mu_n, size = 1, n = 1787, prob = 0.01)
qbinom(mu_n, n = 1787, prob = 0.01)
qbinom(mu_n, prob = 0.01)
qbinom(mu_n, size = 1787, prob = 0.01)
pbinom(mu_n, size = 1787, prob = 0.01)
qbinom(100, size = 1787, prob = 0.01)
qbinom(1, size = 1787, prob = 0.01)
qbinom(0.1, size = 1787, prob = 0.01)
?binom.test
binom.test(10, 1787, 0.01)
binom.test(10, 1787, 0.01, alternative = "l")
binom.test(10, 1787, 0.01, alternative = "g")
binom.test(10, 1787, 0.01, alternative = "l")
?t.test
s_p <- sqrt(8*(1.5^2 + 1.8^2)/16)
t <- -4/(s_p * sqrt(2/9))
-4 + c(-1, 1)*qt(0.975, )
?qt
-4 + c(-1, 1)*qt(0.975, 16)*t
t
s_p <- sqrt(8*(1.5 + 1.8)/16)
t <- -4/(s_p * sqrt(2/9))
t
s_p <- sqrt(8*(1.5^2 + 1.8^2)/16)
t <- -4/(s_p * sqrt(2/9))
2*pt(t, 16)
z <- qnorm(0.975)
z
pnorm(0.01 + z * 0.04 / 10, mean = 0.01, sd = 0.04 / 10, lower.tail = FALSE)
z <- qnorm(0.95)
pnorm(0.01 + z * 0.04 / 10, mean = 0.01, sd = 0.04 / 10, lower.tail = FALSE)
mu0 = 0.0
mua = 0.1
sigma = 4
sigma = 0.04
n = 100
z <- qnorm(1 - alpha)
alpha <- 0.05
z <- qnorm(1 - alpha)
pnorm(mu0 + x * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
z
pnorm(mu0 + z * sigma/sqrt(n), mean = mu0, sd = sigma/sqrt(n), lower.tail = FALSE)
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
pnorm(mua + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
pnorm(mua + z * sigma/sqrt(n), mean = mu0, sd = sigma/sqrt(n), lower.tail = FALSE)
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
0.01/0.04 * 10
mua = 0.01
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
n <- 120
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
n <- 140
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
n <- 160
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
n <- 180
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
x <- rexp(40)
x
plot(x)
hist(x)
x <- rexp(4000)
?hist
hist(x, breaks=20)
hist(x, breaks=50)
avg(x)
ave(x)
setwd("/home/mike/RFiles/StatisticalInference")
setwd("/home/mike/RFiles/StatisticalInference/StatsProject")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
?geom_smooth
?geom_point
x = seq(0.1, 3, 99)
x
?seq
?geom_smooth
install.packages('latex2exp')
?ggtitle
?TeX
library("latex2exp")
?TeX
library("ggplot2")
?atop
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
?matrix
m <- matrix(nrow=1000, ncol=40)
n <- 40
samples <- 1000
exp_rands <- rexp(n * samples)
dim(exp_rands) <- c(n, samples)
head(exp_rands)
exp_rands <- rexp(n * samples)
dim(exp_rands) <- c(samples, n)
head(exp_rands)
means <- apply(exp_rands, 1, mean)
hist(means)
hist(means, breaks = 50)
hist(means, breaks = 20)
vars <- apply(exp_rands, 1, var)
hist(vars, breaks = 20)
?rexp
?geom_histogram
?pi
variances <- apply(exp_rands, 1, var)
h <- ggplot(data.frame(x = variances), aes(x = x))
h <- h + geom_histogram(bins=20)
h
exp_rands <- rexp(n * samples, rate = 0.2)
dim(exp_rands) <- c(n, samples)
variances <- apply(exp_rands, 1, var)
h <- ggplot(data.frame(x = variances), aes(x = x))
h <- h + geom_histogram(bins=20)
h
h <- h + geom_histogram(bins=100)
h
h <- ggplot(data.frame(x = variances), aes(x = x))
h <- h + geom_histogram(bins=100)
h
exp_rands <- rexp(n * samples, rate = 0.2)
dim(exp_rands) <- c(samples, n)
variances <- apply(exp_rands, 1, var)
h <- ggplot(data.frame(x = variances), aes(x = x))
h <- h + geom_histogram(bins=100)
h
library("ggplot2")
library("latex2exp")
set.seed(42030217)
lambda <- 0.2
sigma <- 1 / lambda
mean <- 1 / lambda
n <- 40
samples <- 1000
bins <- 40
bin_scale <- 4
x <- seq(0.05, 30, 0.05)
y <- lambda + exp(-lambda * x)
data <- data.frame(cbind(x=x, y=y))
g <- ggplot(data, aes(x = x, y = y))
g <- g + geom_point(size = 0.5)
g <- g + ggtitle(TeX("$f(x; \\lambda) = \\lambda e^{-\\lambda x}; \\lambda = 0.2$"))
g <- g + ylab(expression(f(x)))
g <- g + theme(plot.title = element_text(hjust = 0.5))
g
sample_sigma = sigma / sqrt(n)
exp_rands <- rexp(n * samples, rate = lambda)
dim(exp_rands) <- c(samples, n)
means <- apply(exp_rands, 1, mean)
sample_mean <- mean(means)
x <- seq(0.00, max(means), 0.01)
y <- dnorm(x, mean = mean, sd = sample_sigma) / bin_scale
normal_data <- data.frame(cbind(x=x, y=y))
g <- ggplot(data.frame(x = means), aes(x = x))
g <- g + geom_bar(binwidth = 1 / bin_scale, color = "black", fill = "lightblue", aes(y = (..count..)/sum(..count..)))
g <- g + geom_point(data = normal_data, size = 0.5, aes(x = x, y = y))
g <- g + labs(title = "Simulated sample means versus normal distribution", xlab = "mean", ylab = "frequency")
g
variances <- apply(exp_rands, 1, var)
x <- seq(mean, max(variances), 0.01)
bin_width <- (max(x) - min(x)) / bins
bin_scale <- 1 / bin_width
m_prime <- (mean + sample_sigma^2*x) * exp(mean * x + sample_sigma^2*x^2/2)
m_double_prime <- sample_sigma^2 * exp(mean * x + sample_sigma^2*x^2/2) + exp(mean * x + sample_sigma^2*x^2/2) * (mean + x * sample_sigma^2)^2
y <- m_double_prime - m_prime^2
variance_data <- data.frame(cbind(x=x, y=y))
View(variance_data)
install.packages("moments")
library("moments")
results <- all.moments(x, order.max = 2)
library("ggplot2")
library("latex2exp")
set.seed(42030217)
lambda <- 0.2
sigma <- 1 / lambda
mean <- 1 / lambda
variance <- 1 / lambda ^ 2
n <- 40
samples <- 1000
bins <- 40
bin_scale <- 4
x <- seq(0.05, 30, 0.05)
y <- lambda + exp(-lambda * x)
data <- data.frame(cbind(x=x, y=y))
g <- ggplot(data, aes(x = x, y = y))
g <- g + geom_point(size = 0.5)
g <- g + ggtitle(TeX("$f(x; \\lambda) = \\lambda e^{-\\lambda x}; \\lambda = 0.2$"))
g <- g + ylab(expression(f(x)))
g <- g + theme(plot.title = element_text(hjust = 0.5))
g
variances <- apply(exp_rands, 1, var)
x <- seq(min(variances), max(variances), 0.01)
bin_width <- (max(x) - min(x)) / bins
y <- (dnorm(x^2, mean = mean, sd = sample_sigma) + dnorm(x^2, mean = mean, sd = sample_sigma)^2)
variance_data <- data.frame(cbind(x=x, y=y))
h <- ggplot(data.frame(x = variances), aes(x = x))
h <- h + geom_bar(binwidth = bin_width, color = "black", fill = "lightblue", aes(y = (..count..)/sum(..count..)))
h <- h + geom_point(data = variance_data, size = 0.5, aes(x = x, y = y))
h <- h + labs(title = "Simulated sample means versus normal distribution", xlab = "mean", ylab = "frequency")
h
y
x
variances <- apply(exp_rands, 1, var)
x <- seq(min(variances), max(variances), 0.01)
bin_width <- (max(x) - min(x)) / bins
y <- (dnorm(x^2, mean = mean, sd = sample_sigma) + dnorm(x, mean = mean, sd = sample_sigma)^2)
variance_data <- data.frame(cbind(x=x, y=y))
h <- ggplot(data.frame(x = variances), aes(x = x))
h <- h + geom_bar(binwidth = bin_width, color = "black", fill = "lightblue", aes(y = (..count..)/sum(..count..)))
h <- h + geom_point(data = variance_data, size = 0.5, aes(x = x, y = y))
h <- h + labs(title = "Simulated sample means versus normal distribution", xlab = "mean", ylab = "frequency")
h
y
?var
install.packages("lambertw")
install.packages("LambertW")
?ln
?log
library("LambertW")
variances <- apply(exp_rands, 1, var)
x <- seq(min(variances), max(variances), 0.01)
bin_width <- (max(x) - min(x)) / bins
K <- 1 / (x - mean)
bta <- -1
r <- log(1 / ((x - mean) * y * sqrt(2 * pi)))
v <- (k * W( (bta * exp(r / K) ^ bta) / K ) / bta) / (1 / bta)
v <- (K * W( (bta * exp(r / K) ^ bta) / K ) / bta) / (1 / bta)
v
K <- x - mean
bta <- -1
r <- log((x - mean) / (y * sqrt(2 * pi)))
v <- (K * W( (bta * exp(r / K) ^ bta) / K ) / bta) / (1 / bta)
v
?solve
K <- -1 / (mean - x)
bta <- -1
r <- -1 * log((mean - x) / (y * sqrt(2 * pi)))
v <- (K * W( (bta * exp(r / K) ^ bta) / K ) / bta) / (1 / bta)
v
r
K
r <- -1 * log((x - mean) / (y * sqrt(2 * pi)))
v <- (K * W( (bta * exp(r / K) ^ bta) / K ) / bta) / (1 / bta)
v
K <- x - mean
bta <- -1
r <- log((x - mean) / (y * sqrt(2 * pi)))
v <- (K * W( (bta * exp(r / K) ^ bta) / K ) / bta) / (1 / bta)
v
x <- seq(0.00, max(means), 0.01)
y <- dnorm(x, mean = mean, sd = sample_sigma) / bin_scale
K <- x - mean
bta <- -1
r <- log((x - mean) / (y * sqrt(2 * pi)))
v <- (K * W( (bta * exp(r / K) ^ bta) / K ) / bta) / (1 / bta)
K <- 1 / x - mean
bta <- -1
r <- log((mean - x) / (y * sqrt(2 * pi)))
v <- (K * W( (bta * exp(r / K) ^ bta) / K ) / bta) / (1 / bta)
v
plot(v)
K <- 1 / x - mean
bta <- -1
r <- -1 * log((mean - x) / (y * sqrt(2 * pi)))
v <- (K * W( (bta * exp(r / K) ^ bta) / K ) / bta) / (1 / bta)
plot(v)
plot(v^2)
variances <- apply(exp_rands, 1, var)
x <- seq(min(variances), max(variances), 0.01)
?dchisq
v <- dchisq(x, 39, 1000)
plot v
plot(v)
v <- pchisq(x, 39, 1000)
plot(v)
v <- qchisq(x, 39, 1000)
v <- dchisq(x, 39)
plot(v)
x
plot(sqrt(v)
)
v <- qchisq(x, 9, 1000)
v <- qchisq(x, 9)
plot(sqrt(v))
v <- qchisq(x, 19)
v <- qchisq(x, 29)
v <- qchisq(x, 39)
v <- qchisq(x, 39, 1000)
v <- dchisq(x, 39)
v <- dchisq(x, 9)
plot(sqrt(v))
v <- dchisq(x, 19)
plot(sqrt(v))
v <- dchisq(x, 12)
plot(sqrt(v))
v <- dchisq(x, 39)
plot(sqrt(v))
x <- seq(0.00, max(means), 0.01)
v <- dchisq(x, 39)
plot(sqrt(v))
variances <- apply(exp_rands, 1, var)
x <- seq(min(variances), max(variances), 0.01)
bin_width <- (max(x) - min(x)) / bins
v <- dchisq(x, 39)
plot(sqrt(v / bin_width))
plot(sqrt(v)/39)
x
x <- seq(0, 10, 0.1)
v <- dchisq(x, 39)
plot(v)
plot(sqrt(v)
)
v <- dchisq(x, 5)
plot(sqrt(v)
)
x <- seq(0, 20, 0.1)
v <- dchisq(x, 5)
plot(sqrt(v))
v <- dchisq(x, 6)
plot(sqrt(v))
v <- dchisq(x, 4)
plot(sqrt(v))
v <- dchisq(x, 5)
plot(sqrt(v))
x <- seq(0, 40, 0.1)
v <- dchisq(x, 5)
plot(sqrt(v))
v <- dchisq(x, 39)
plot(sqrt(v))
variances <- apply(exp_rands, 1, var)
x <- seq(min(variances), max(variances), 0.01)
bin_width <- (max(x) - min(x)) / bins
v <- dchisq(x, 39)
plot(sqrt(v))
plot(sqrt(v) / bin_width)
v <- dchisq(x, 39)x
x
plot(x ~ sqrt(v))
plot(sqrt(v) ~ x)
y <- sqrt(v * sigma ^ 2 / 39)
plot(y ~ x)
y <- sqrt(v * sample_sigma ^ 2 / 39)
plot(y ~ x)
y <- v * sample_sigma ^ 2 / 39
plot(y ~ x)
x
v <- dchisq(seq(0, 60, 0.01), 39)
y <- seq(0, 60, 0.01)
v <- dchisq(y, 39)
plot(y ~ v)
plot(v ~ y)
v <- dchisq(y, 29)
plot(y ~ v)
plot(v ~ y)
v <- dchisq(y, 19)
plot(v ~ y)
v <- dchisq(y, 15)
plot(v ~ y)
v <- dchisq(y, 19)
plot(v ~ y)
v <- dchisq(39, 19)
dchisq(39, 19)
dchisq(38, 19)
dchisq(37, 19)
dchisq(36, 19)
dchisq(35, 19)
dchisq(30, 19)
dchisq(35, 19)
dchisq(34, 19)
dchisq(33, 19)
dchisq(32, 19)
dchisq(31, 19)
dchisq(30, 19)
dchisq(30, 39)
dchisq(31, 39)
dchisq(38, 39)
dchisq(40, 39)
dchisq(39, 39)
dchisq(37, 39)
dchisq(38, 39)
dchisq(35, 39)
dchisq(36, 39)
dchisq(30, 39)
dchisq(31, 39)
dchisq(32, 39)
dchisq(33, 39)
dchisq(34, 39)
dchisq(35, 39)
dchisq(36, 39)
dchisq(37, 39)
dchisq(38, 39)
variances <- apply(exp_rands, 1, var)
x <- seq(min(variances), max(variances), 0.01)
bin_width <- (max(x) - min(x)) / bins
x
max(x)
?seq
install.packages(manipulate)
install.packages("manipulate")
source('~/RFiles/StatisticalInference/chifit.R')
manipulate(myplot(min, max, scale, df),
min = slider(0, 40, step = 1, initial = 0),
max = slider(20, 100, step = 1, initial = 40),
scale = slider(0.05, 3, step = 0.05, initial = 1),
df = slider(2, 40, step = 1, initial = 9))
manipulate(myplot(min, max, scale, df),
min = slider(0, 40, step = 1, initial = 0),
max = slider(20, 100, step = 1, initial = 40),
scale = slider(0.05, 3, step = 0.05, initial = 1),
df = slider(2, 40, step = 1, initial = 9))
